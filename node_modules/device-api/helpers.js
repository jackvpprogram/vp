var __symbolPrefix = "3r/device-api/helpers/"
var Radical = Radical || {};
var baseAddress = "http://aws1.radicalrealms.com:3000";
//var baseAddress = "http://localhost:3000";

if (typeof window != "undefined") {

    window.requestAnimFrame = (function () {
        return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function (/* function */ callback, /* DOMElement */ element) {
                window.setTimeout(callback, 1000 / 60);
            };
    })();
}

function getParameterByName(window, name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)", "i"),
        results = regex.exec(window.location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

getParameterByName._depends = {
    symbol : "3r/getParameterByName",
    modules : ["window"]
}

function convertToNumber(something) {
    var points = 0;
    try {
        points = parseInt(something);
    }
    catch (e) {
    }
    if (isNaN(points)) points = 0;
    return points;
}


function randomInt(lower, upper) {
    return Math.floor(Math.random() * (upper - lower) + lower);
}



if (typeof window != "undefined") {
    Radical.oldConsole = Radical.oldConsole || window.console;
    window.onerror = window.onerror;
    /*function(errmsg, url, linenumber) {
     window.console.error("URL: " + url + " LINE: " + linenumber + " MSG: " + errmsg);
     window.console.trace();
     return true;
     };*/
    var alreadyLogging;
    window.console = window.console || {
            log: function (toLog, tag) {

                toLog = (new Date()).toISOString() + ": " + toLog;
                tag = tag || "RADICAL ";
                if (alreadyLogging) return;
                alreadyLogging = true;
                Radical.oldConsole.log(tag + toLog);
                alreadyLogging = false;
                $.ajax({
                    url: baseAddress + "/log/" + encodeURIComponent("INFO: " + toLog + '\n')
                });
            },
            warn: function (toLog, tag) {
                toLog = (new Date()).toISOString() + ": " + toLog;
                tag = tag || "RADICAL ";
                if (alreadyLogging) return;
                alreadyLogging = true;
                Radical.oldConsole.warn(tag + toLog);
                alreadyLogging = false;
                $.ajax({
                    url: baseAddress + "/log/" + encodeURIComponent("WARN: " + toLog + '\n')
                });
            },
            error: function (toLog, tag) {
                tag = tag || "RADICAL ";
                toLog = (new Date()).toISOString() + ": " + toLog;
                if (alreadyLogging) return;
                alreadyLogging = true;
                Radical.oldConsole.error(tag + toLog);
                alreadyLogging = false;
                $.ajax({
                    url: baseAddress + "/log/" + encodeURIComponent("ERR : " + toLog + '\n')
                });
            },

            trace: function () {
                oldConsole.trace();
            }
        }
}

if (typeof $ != "undefined") {

    $.fn.sequenceEqual = function (compareTo) {
        if (!compareTo || !compareTo.length || this.length !== compareTo.length) {
            return false;
        }
        for (var i = 0, length = this.length; i < length; i++) {
            if (this[i] !== compareTo[i]) {
                return false;
            }
        }
        return true;
    }
}

function replaceAll(find, replace, str) {
    if (!str)
        return str;
    return str.replace(new RegExp(find, 'g'), replace);
}

Radical.debugging = true;
Radical.handleExceptions = true;

Radical.empty = [];

Radical.invokePassArguments = function (array, refThis, params) {
    if (!array || array.$processing)
        return;

    array.$processing = true;

    var i, l;
    var parameters = Radical.empty;
    if (params) {
        parameters = [];
        for (i = 2; i < params.length; i++) {
            parameters.push(params[i]);
        }
    }

    for (i = 0, l = array.length; i < l; i++) {
        array[i].apply(refThis, parameters);
    }
    array.$processing = false;

}

Radical.invokeParams = function (array, refThis, b) {
    if (!array || array.$processing)
        return;

    array.$processing = true;

    var i, l;
    var parameters = Radical.empty;
    if (b) {
        parameters = Array.prototype.slice.call(arguments, 2);
    }
    var promises = []
    for (i = 0, l = array.length; i < l; i++) {
        try {
            promises.push(Promise.resolve(array[i].apply(refThis, parameters)).then(function () {
                return true
            }, function (e) {
                console.error(e);
                return true
            }));
        }
        catch (e) {
            console.error(e.stack);
        }
    }
    array.$processing = false;
    return Promise.all(promises)
};

Radical.invoke = function (array, refThis) {
    if (!array)
        return;

    for (var i = array.length - 1; i >= 0; i--) {
        array[i].apply(refThis);
    }
};

function extend(subClass, superClass, properties) {
    var F = function () {
    };
    F.prototype = superClass.prototype;
    var newOne = new F();
    if (properties) {
        Object.defineProperties(newOne, properties);
    }

    subClass.prototype = newOne;
    subClass.prototype.constructor = subClass;

    subClass.superclass = superClass.prototype;
    if (superClass.prototype.constructor == Object.prototype.constructor) {
        superClass.prototype.constructor = superClass;
    }
}

Function.prototype.extend = function (superClass, properties) {
    return extend(this, superClass, properties);
};

if (typeof window != "undefined") {

    window.pad = function pad(num, size) {
        return ('000000000000000' + num).substr(-size);
    };

}

String.prototype.format = function (args) {
    var str = this;
    if (!Array.isArray(args)) {
        args = Array.prototype.slice.apply(arguments);
    }
    return str.replace(String.prototype.format.regex, function (item) {
        var intVal = parseInt(item.substring(1, item.length - 1));
        var replace;
        if (intVal >= 0) {
            replace = args[intVal];
        } else if (intVal === -1) {
            replace = "{";
        } else if (intVal === -2) {
            replace = "}";
        } else {
            replace = "";
        }
        return replace;
    });
};
String.prototype.format.regex = new RegExp("{-?[0-9]+}", "g");

if (typeof window != "undefined") {

    window.logging = function (level) {
        var console = window.console;
        level = level || 'normal';
        switch (level) {
            case 'normal':
                return console;
            case 'warn':
                return {
                    log: function () {
                    },
                    warn: function (toLog, tag) {
                        console.warn(toLog, tag);
                    },
                    error: function (toLog, tag) {
                        console.error(toLog, tag);
                    }
                };
            case 'error':
                return {
                    log: function () {
                    },
                    warn: function () {
                    },
                    error: function (toLog, tag) {
                        console.error(toLog, tag);
                    }
                };
        }
    }
}


function makeNameArray(obj) {
    var result = [];
    if (obj) {
        $.each(obj, function (i, v) {
            if (i.substring(0, 2) == "__") return;
            result.push(v);
        });
    }
    return result;
}


function makeArray(obj) {
    var result = [];
    if (obj) {
        $.each(obj, function (i, v) {
            if (i.substring(0, 2) == "__") return;
            result.push(i);
        });
    }
    return result;
}

function convertDate(date, getting) {
    getting = getting || true;
    if (getting) {
        return (new Date(Date.parse(date))).toDateInputValue();
    } else {
        return new Date(Date.parse(date));
    }
}

String.format = function () {
    var s = arguments[0];
    for (var i = 0; i < arguments.length - 1; i++) {
        var reg = new RegExp("\\{" + i + "\\}", "gm");
        s = s.replace(reg, arguments[i + 1]);
    }

    return s;
};

Radical.isObject = function (test) {
    return (typeof test == "object") && test != null;
};


Radical.isArray = function (array) {
    return $.isArray(array);
    //return array instanceof Array || (array && array.$isArray) || Object.prototype.toString.call( array ) === '[object Array]';
};

Radical.newGuid = function () {
    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16).toUpperCase();
    });
};

if (typeof exports == "object") {
    exports.Radical = Radical
    exports.convertDate = convertDate
    exports.getParameterByName = getParameterByName
    exports.convertToNumber = convertToNumber
    exports.randomInt = randomInt
}

Radical._depends = {
    symbol : __symbolPrefix + "Radical"
}

if (typeof window == "object" && window == this && this.ioc && typeof this.ioc.injectAll == "function") {
    this.ioc.injectAll(Radical)
    getParameterByName = this.ioc.inject(getParameterByName)
    this.ioc.inject(Radical)
}
