function getApiAddress(_, window, getParameterByName, client, country, service, port, path, data, cdn, noCdn) {
    if (_.isObject(client)) {
        client = _.extend({}, typeof defaultApi == "object" ? defaultApi : {}, client)
        country = client.country
        service = client.service
        port = client.port
        path = client.path
        data = client.data
        cdn = client.cdn
        noCdn = client.noCdn

        //Must be last
        client = client.client
        if (path) {
            if (data)
                path = path.replace(/:([a-zA-Z][a-zA-Z0-9_]*)/ig, function (match, capture) {
                    var value = encodeURIComponent(data[capture])
                    delete data[capture]
                    return value || ""
                })
            path =
                _.size(data)
                    ?
                    path + '?' + _(data)
                        .pairs()
                        .chunk(2)
                        .map(function (p) {
                            return _.map(p, function (p) {
                                return p.join('=')
                            })
                        })
                        .flatten()
                        .value()
                        .join('&')
                    :
                    path

        }
    }
    path = path || ''

    var protocol
    var prefix = ''
    var serveLocal = getParameterByName("local")

    if (!serveLocal) {
        switch (port) {
            case 3009:
                prefix = '/_/api/'
                break
            case 3030:
                prefix = '/_/api/'
                break
            case 3040:
                prefix = '/_/gtp/'
                break
            case 3000:
                prefix = '/_/api/'
                break
            case 3001:
                prefix = '/_/gtp/'
                break
            case 3090:
                prefix = '/_/chat/'
                break
            case 3020:
                prefix = ''
                protocol = window.location.protocol + "//"
                //if (window.location.protocol.indexOf('https') != -1) {
                port = ''
                //}
                service = 'app'
                break
            case 443:
                prefix = ''
                port = ''

                protocol = 'https://'
                break
            case 80:
                prefix = ''
                port = ''
                protocol = 'http://'
                service = 'voco'
                break
        }
    } else {
        switch (port) {
            case 3009:
                protocol = 'https://'
                service = 'api'
                break
            case 3030:
                protocol = 'https://'
                service = 'api'
                break
            case 3040:
                protocol = 'https://'
                service = 'gtp'
                break
            case 3050:
                protocol = 'https://'
                break
            case 3000:
                protocol = 'http://'
                service = 'api'
                break
            case 3001:
                protocol = 'http://'
                service = 'gtp'
                break
            case 3020:
                protocol = window.location.protocol + "//"
                //if (window.location.protocol.indexOf('https') != -1) {
                port = ''
                //}
                service = 'app'
                break
            case 443:
                prefix = ''
                port = ''
                protocol = 'https://'
                break
            case 80:
                prefix = ''
                port = ''
                protocol = 'http://'
                service = 'voco'
                break
        }
    }
    //service = 'app' //defaultApi.service
    var host = window.apiAddress ? window.apiAddress.replace(/http[s]*:\/\//, "") : window.location.hostname;
    var app = getParameterByName("app")
    var appAddress = getParameterByName("useapi")

    if (app && appAddress) {
        return appAddress + prefix + path
    }
    var parts = host.split('-')
    if (path) {
        if (!_.startsWith(path, '/')) path = '/' + path
    }
    if (cdn && window.cdnPath) {
        return window.cdnPath + path
    }
    //if it is from cordova
    if (protocol == "file://") protocol = "https://";
    var returns
    if (window.cdnPath && isCDNLocal && !noCdn) {
        console.log("CDN")
        returns = window.cdnPath + prefix + path
    } else {
        if (prefix) {
            return window.apiAddress ? (window.apiAddress + prefix + path) : (window.location.protocol + "//" + window.location.hostname + (window.location.port ?
                    ':' + window.location.port :
                    '') + prefix + path)
        }
        if (parts.length < 3 && parts[0] != 'localhost') {
            returns = protocol + "{0}{2}{1}".format([
                    host,
                    port,
                    port
                        ? ':'
                        : ''
                ]) + path
        } else if (host.indexOf(".vocohub.") == -1) {
            returns = protocol + "{0}-{1}-{2}{3}{5}{4}".format([
                    client, country, service, host.replace(/^[^.]*/, ""),
                    port,
                    port
                        ? ':'
                        : ''
                ]) + path
        } else {
            if (client == '') {
                //debugger;
            }
            returns = protocol + "{0}-{1}-{2}.vocohub.com{4}{3}".format([
                    client, country, service, port,
                    port
                        ? ':'
                        : ''
                ].map(function (c) {
                    return ('' + c).toLowerCase()
                })) + (path || '')
        }
    }
    return returns
}

getApiAddress._depends = {
    symbol : "3r/getApiAddress",
    modules : [
        "_",
        "window",
        "3r/getParameterByName"
    ]
}

if (typeof exports == "object") {
    exports.getApiAddress = getApiAddress
}

if (typeof window == "object" && window == this && this.ioc && typeof this.ioc.inject == "function") {
    window.getApiAddress = getApiAddress = this.ioc.inject(getApiAddress)
}
